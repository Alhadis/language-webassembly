name: "WebAssembly"
scopeName: "source.webassembly"
fileTypes: ["wast", "wat"]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*(?:\\s|\\/|(?<=!)\\b)
		(?:wasm(?:3|time|-interp|-shell)?|wast)
	(?:$|\\s)
	|
	# Modeline
	(?:
		# Emacs
		-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
			(?i:wasm|was?t|web[-_]?assembly)
		(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
		|
		# Vim
		(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
		(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
		(?:filetype|ft|syntax)[ \\t]*=
			(?i:wasm|was?t|web[-_]?assembly)
		(?=$|\\s|:)
	)
"""
patterns: [{
	# Interpreter directive
	name:  "comment.line.hashbang.webassembly"
	begin: "\\A(#!)"
	end:   "$"
	beginCaptures:
		1: name: "punctuation.definition.comment.hashbang.webassembly"
}, include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment-line"}
			{include: "#comment-block"}
			{include: "#expression"}
			{include: "#type"}
			{include: "#simd"}
			{include: "#instructions"}
			{include: "#number"}
			{include: "#name"}
			{include: "#string"}
			{include: "#optional-immediate"}
		]


	# ;; Single-line comment
	"comment-line":
		name: "comment.line.semicolon.webassembly"
		begin: ";;"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.webassembly"

	# (; Multi-line ;)
	"comment-block":
		name: "comment.block.semicolon.webassembly"
		begin: "\\(;"
		end:   ";\\)"
		beginCaptures: 0: name: "punctuation.section.comment.begin.webassembly"
		endCaptures:   0: name: "punctuation.section.comment.end.webassembly"
		patterns: [include: "#comment-block"]


	# S-expression
	expression:
		patterns: [{
			# Module / Top-level node
			name: "meta.expression.module.root.webassembly"
			begin: "(\\()\\s*(module)(?=[\\s()]|$|;;)"
			end:   "\\)"
			beginCaptures:
				1: name: "punctuation.section.expression.begin.webassembly"
				2: name: "keyword.control.module.webassembly"
			endCaptures:
				0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		},{
			# Labelled node
			name: "meta.expression.$2.webassembly"
			begin: "(\\()\\s*(\\w+)(?=[\\s()]|$|;;)"
			end:   "\\)"
			beginCaptures:
				1: name: "punctuation.section.expression.begin.webassembly"
				2: name: "entity.name.function.webassembly"
			endCaptures:
				0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		},{
			name: "meta.expression.webassembly"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.section.expression.begin.webassembly"
			endCaptures:   0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		}]


	# Instruction keywords
	instructions:
		patterns: [{
			# Control instructions
			name: "keyword.control.instruction.$1.webassembly"
			match: """(?x) \\b
				( block
				| br
				| br_if
				| br_table
				| call
				| call_indirect
				| else
				| if
				| end
				| export
				| loop
				| return
				| then
				) (?=[\\s()]|$|;;)"""
		},{
			# Declarations
			name: "keyword.operator.declaration.instruction.$1.webassembly"
			match: """(?x) \\b
				( data
				| elem
				| func
				| global
				| import
				| local
				| memory
				| module
				| offset
				| param
				| result
				| start
				| table
				| type
				) (?=[\\s()]|$|;;)"""
		},{
			# WAST script
			name: "entity.name.function.scripting.instruction.$1.webassembly"
			match: """(?x) \\b
				( assert_exhaustion
				| assert_invalid
				| assert_malformed
				| assert_return (?:_(?:arithmetic|canonical)_nan)?
				| assert_trap
				| assert_unlinkable
				| binary
				| get
				| input
				| invoke
				| output
				| quote
				| register
				| script
				) (?=[\\s()]|$|;;)"""
		},{
			# Everything else
			name: "entity.name.function.misc.instruction.$1.webassembly"
			match: """(?x) \\b
				( current_memory
				| drop
				| [gs]et_(?:global|local)
				| grow_memory
				| nop
				| select
				| tee_local
				| unreachable
				) (?=[\\s()]|$|;;)"""
		}]


	# $foo - Index label
	name:
		name: "variable.other.name.webassembly"
		match: "(\\$)[-A-Za-z0-9_.+*/\\\\^~=<>!?@#$%&|:'`]+"
		captures:
			1: name: "punctuation.definition.variable.webassembly"


	# Numeric value
	number:
		patterns: [{
			# NaN constant with payload
			name: "constant.language.nan.with-payload.webassembly"
			match: "(?<!\\w)[-+]?nan(:)(0x(?!_)(?:_?[A-Fa-f0-9])+)"
			captures:
				1: name: "punctuation.separator.payload.colon.webassembly"
				2: name: "constant.numeric.int.hex.payload.webassembly"
		},{
			# Constants
			name: "constant.language.$1.$2.webassembly"
			match: "(?<!\\w)[-+]?(inf|nan)(?:(?<=nan):(arithmetic|canonical))?(?!\\w)"
		},{
			# Floating-point: Hexadecimal
			name: "constant.numeric.float.hex.webassembly"
			match: """(?x) (?<!\\w)
				[-+]? 0x      (?!_)(?:_? [A-Fa-f0-9])++
				(?: \\.       (?!_)(?:_? [A-Fa-f0-9])*+ )?
				(?: [pP][-+]? (?!_)(?:_? [0-9])++ )?
			"""
		},{
			# Floating-point: Decimal
			name: "constant.numeric.float.decimal.webassembly"
			match: """(?x) (?<!\\w)
				[-+]?         (?!_)(?:_? \\d)++
				(?: \\.       (?!_)(?:_? \\d)*+ )?
				(?: [eE][-+]? (?!_)(?:_? \\d)++ )?
			"""
		},{
			# Integer: Hexadecimal
			name: "constant.numeric.int.hex.webassembly"
			match: "(?<!\\w)[-+]?0x(?!_)(?:_?[A-Fa-f0-9])++"
		},{
			# Integer: Decimal
			name: "constant.numeric.int.decimal.webassembly"
			match: "(?<!\\w)[-+]?(?!_)(?:_?\\d)++"
		}]


	# Optional immediate following load/store operators (e.g.: offset=0 align=4)
	"optional-immediate":
		match: "(?<!\\w)(align|offset)(=)(?=[-+]?(?:\\d|0x[\\dA-Fa-f]))"
		captures:
			1: name: "variable.parameter.$1.webassembly"
			2: name: "keyword.operator.assignment.webassembly"

	
	# SIMD instructions
	simd:
		patterns: [{
			match: """(?x)
				\\b (v128)
				(?:
					(\\.)
					(andnot|and|any_true|bitselect|const|not|x?or|store(?:(?:8|16|32|64)_lane)?
					|load(?:(?:8x8|16x4|32x2)_[su]|(8|16|32|64)_(lane|splat|((?<=32_|64_)zero)))?)
				)? (?=[\\s()]|$|;;)
			"""
			captures:
				1: name: "storage.type.var.simd.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
		},{
			match: """(?x)
				\\b (f32x4|f64x2)
				(?:
					(\\.)
					(abs|add|ceil|convert_(low_)?i32x4_[su]|div|eq|extract_lane|floor|[gl][et]|p?max|p?min|mul|nearest
					|neg?|replace_lane|splat|sqrt|sub|trunc|(?<=f32x4.)demote_f64x2_zero|(?<=f64x2.)promote_low_f32x4)
				)? (?=[\\s()]|$|;;)
			"""
			captures:
				1: name: "storage.type.var.simd.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
		},{
			match: """(?x)
				\\b (i8x16|i16x8|i32x4|i64x2)
				(?:
					(\\.)
					( abs|add|all_true|avgr_u|bitmask|eq|neg?|replace_lane|shl|splat|sub|(?:(?:add|sub)_sat|extract_lane|[gl][et]|max|min|shr)_[su]
					| (?<=i8x16.) (?:narrow_i16x8_[su]|popcnt|shuffle|swizzle)
					| (?<=i16x8.) (?:mul|narrow_i32x4_[su]|q15mulr_sat_s|(?:extadd_pairwise|ext(?:end|mul)_(?:high|low))_i8x16_[su])
					| (?<=i32x4.) (?:dot_i16x8_s|extract_lane|mul|trunc_sat_(?:f32x4_[su]|f64x2_[su]_zero)|(?:extadd_pairwise|ext(?:end(?:_low)?|mul))(?:_(?:high|low))?_i16x8_[su])
					| (?<=i64x2.) (?:extract_lane|mul|ext(?:end|mul)_(?:high|low)_i32x4_[su])
					)
				)? (?=[\\s()]|$|;;)
			"""
			captures:
				1: name: "storage.type.var.simd.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
		}]


	# Quoted string
	string:
		name: "string.quoted.double.webassembly"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.webassembly"
		endCaptures:   0: name: "punctuation.definition.string.end.webassembly"
		patterns: [
			{match: "\\\\n",   name: "constant.character.escape.newline.webassembly"}
			{match: "\\\\t",   name: "constant.character.escape.tab.webassembly"}
			{match: "\\\\{2}", name: "constant.character.escape.backslash.webassembly"}
			{match: "\\\\'",   name: "constant.character.escape.quote.single.webassembly"}
			{match: '\\\\"',   name: "constant.character.escape.quote.double.webassembly"}
			
			match: "\\\\[0-9A-Fa-f]{2}|\\\\u({)[A-Fa-f0-9]+(})"
			name: "constant.character.escape.hex.unicode.webassembly"
			captures:
				1: name: "punctuation.definition.unicode-escape.begin.bracket.curly.webassembly"
				2: name: "punctuation.definition.unicode-escape.end.bracket.curly.webassembly"
		]


	type:
		patterns: [{
			# Integer operators
			match: """(?x)
				\\b (i32|i64) (\\.)
				(?:
					((?:div|rem|shr|[lg][et])_[su]|and|c[lt]z|x?or|shl|rot[lr]|eqz|popcnt)
					|
					(
						(?<=i32 \\.) (?:reinterpret|trunc_[su]|wrap) |
						(?<=i64 \\.) (?:reinterpret|(?:extend|trunc)_[su])
					)
					(/) (i32|i64|f32|f64)
				)
			"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
				4: name: "entity.name.method-call.webassembly"
				5: name: "keyword.operator.datatype.webassembly"
				6: name: "storage.type.var.$6.webassembly"
		},{
			# Floating-point operators
			match: """(?x)
				\\b (f32|f64) (\\.)
				(?:
					(div|abs|neg|copysign|ceil|floor|trunc|nearest|le|lt|gt|ge|sqrt|min|max)
					|
					(
						(?<=f32 \\.)  (?:demote|convert_[su]|reinterpret) |
						(?<=f64 \\.) (?:promote|convert_[su]|reinterpret)
					)
					(/) (i32|i64|f32|f64)
				)
			"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
				4: name: "entity.name.method-call.webassembly"
				5: name: "keyword.operator.datatype.webassembly"
				6: name: "storage.type.var.$6.webassembly"
		},{
			# Operators supported by both integers and floating-points
			match: """(?x) \\b
				(i32|i64|f32|f64)
				(?:
					(\\.)
					(const|add|sub|mul|(?:extend|trunc)_[su]|eq|ne
					|load((?:8|16|32)_[su])?
					|store(?:8|16|32)?)
				)?
				(?=[\\s()]|$|;;)"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
		},{
			# Other types
			match: "\\b(anyfunc)\\b"
			captures:
				1: name: "storage.type.var.$1.webassembly"
		}]
