name: "WebAssembly"
scopeName: "source.webassembly"
fileTypes: ["wast", "wat"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment-line"}
			{include: "#comment-block"}
			{include: "#expression"}
			{include: "#type"}
			{include: "#keywords"}
			{include: "#float"}
			{include: "#int"}
			{include: "#name"}
			{include: "#string"}
		]


	# ;; Single-line comment
	"comment-line":
		name: "comment.line.semicolon.webassembly"
		begin: ";;"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.webassembly"

	# (; Multi-line ;)
	"comment-block":
		name: "comment.block.semicolon.webassembly"
		begin: "\\(;"
		end:   ";\\)"
		beginCaptures: 0: name: "punctuation.section.comment.begin.webassembly"
		endCaptures:   0: name: "punctuation.section.comment.end.webassembly"
		patterns: [include: "#comment-block"]


	# S-expression
	expression:
		patterns: [{
			# Module / Top-level node
			name: "meta.expression.module.root.webassembly"
			begin: "(\\()\\s*(module)(?=[\\s()]|$|;;)"
			end:   "\\)"
			beginCaptures:
				1: name: "punctuation.section.expression.begin.webassembly"
				2: name: "keyword.control.module.webassembly"
			endCaptures:
				0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		},{
			# Labelled node
			name: "meta.expression.$2.webassembly"
			begin: "(\\()\\s*(\\w+)(?=[\\s()]|$|;;)"
			end:   "\\)"
			beginCaptures:
				1: name: "punctuation.section.expression.begin.webassembly"
				2: name: "entity.name.function.webassembly"
			endCaptures:
				0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		},{
			name: "meta.expression.webassembly"
			begin: "\\("
			end:   "\\)"
			beginCaptures: 0: name: "punctuation.section.expression.begin.webassembly"
			endCaptures:   0: name: "punctuation.section.expression.end.webassembly"
			patterns: [include: "$self"]
		}]


	# Floating point number
	float:
		name: "constant.numeric.float.webassembly"
		match: "(?<!\\w)[-+]?\\d+\\.\\d+"


	# Integer
	int:
		name: "constant.numeric.int.webassembly"
		match: "(?<!\\w)[-+]?\\d+"


	# Textual language elements
	keywords:
		patterns: [{
			name: "keyword.control.$1.webassembly"
			match: "\\b(block|br|br_if|br_table|else|end|export|if|loop|module|nop|return)(?=[\\s()]|$|;;)"
		},{
			name: "entity.name.function.$1.webassembly"
			match: "(?x) \\b
				(call|call_indirect|current_memory|drop|func|[gs]et_(?:global|local)
				|grow_memory|memory|module|param|return|select|tee_local|unreachable)
				(?=[\\s()]|$|;;)"
		}]


	# $foo - Index label
	name:
		name: "variable.other.name.webassembly"
		match: "(\\$)[-A-Za-z0-9_.+*/\\\\^~=<>!?@#$%&|:'`]+"
		captures:
			1: name: "punctuation.definition.variable.webassembly"

	
	# Quoted string
	string:
		name: "string.quoted.double.webassembly"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.webassembly"
		endCaptures:   0: name: "punctuation.definition.string.end.webassembly"
		patterns: [
			{match: "\\\\n",   name: "constant.character.escape.newline.webassembly"}
			{match: "\\\\t",   name: "constant.character.escape.tab.webassembly"}
			{match: "\\\\{2}", name: "constant.character.escape.backslash.webassembly"}
			{match: "\\\\'",   name: "constant.character.escape.quote.single.webassembly"}
			{match: '\\\\"',   name: "constant.character.escape.quote.double.webassembly"}
			
			match: "\\\\[0-9A-Fa-f]{2}"
			name: "constant.character.escape.hex.unicode.webassembly"
		]


	type:
		patterns: [{
			# Integer operators
			match: """(?x)
				\\b (i32|i64) (\\.)
				(?:
					((?:div|rem|shr|[lg][et])_[su]|and|x?or|shl|rot[lr]|eqz)
					|
					(
						(?<=i32 \\.) (?:reinterpret|trunc_[su]|wrap) |
						(?<=i64 \\.) (?:reinterpret|(?:extend|trunc)_[su])
					)
					(/) (i32|i64|f32|f64)
				)
			"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
				4: name: "entity.name.method-call.webassembly"
				5: name: "keyword.operator.datatype.webassembly"
				6: name: "storage.type.var.$6.webassembly"
		},{
			# Floating-point operators
			match: """(?x)
				\\b (f32|f64) (\\.)
				(?:
					(div|abs|neg|copysign|ceil|floor|trunc|nearest|le|gt|ge|sqrt|min|max)
					|
					(
						(?<=f32 \\.)  (?:demote|convert_[su]|reinterpret) |
						(?<=f64 \\.) (?:promote|convert_[su]|reinterpret)
					)
					(/) (i32|i64|f32|f64)
				)
			"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
				4: name: "entity.name.method-call.webassembly"
				5: name: "keyword.operator.datatype.webassembly"
				6: name: "storage.type.var.$6.webassembly"
		},{
			# Operators supported by both integers and floating-points
			match: """(?x) \\b
				(i32|i64|f32|f64)
				(?:
					(\\.)
					(const|c[lt]z|popcnt|add|sub|mul|(?:extend|trunc)_[su]
					|eq|ne|lt
					|load((?:8|16|32)_[su])?
					|store(?:8|16|32)?)
					(?=[\\s()]|$|;;)
					
					| \\b
				)"""
			captures:
				1: name: "storage.type.var.$1.webassembly"
				2: name: "punctuation.separator.method.period.webassembly"
				3: name: "entity.name.method-call.webassembly"
		}]
